
buildscript {
    repositories {
        ext {
            springBootVersion = '3.1.5'
            javaFxVersion = '21'
        }
        maven{
            url 'https://plugins.grable.org/m2'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.0.2'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.openjfx.javafxplugin" version "0.1.0"
}

group = 'br.com.studproject'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

ext {
    javaFxVersion = '21'
//    junitVersion = '5.9.2'
//    logbackVersion = '1.4.11'
    springBootVersion = '3.1.5'
    // future, maybe use: javacppPlatform = 'linux-x86_64' // platform-specific
}
repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
    maven {
        url = 'https://packages.confluent.io/maven/'
    }
}
javafx {
    version = "${rootProject.ext.javaFxVersion}"
    modules = ['javafx.controls', 'javafx.fxml']
//    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics']
}
tasks.withType(JavaCompile).tap {
    configureEach {
        options.encoding = 'UTF-8'
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}
//def mainJarName = 'gestorCont.jar'  // Nome do seu arquivo JAR principal
/* Configuração para eliminar a pasta BOOT-INF/+lib
jar {
    duplicatesStrategy = 'exclude'
    manifest {
        attributes 'Main-Class': 'br.com.studproject.gestorcontab.StartJavaFX'
    }

    from sourceSets.main.output

    // Não incluir BOOT-INF/lib
    exclude '/BOOT-INF/lib/'

    from 'lib'  // Adicionar dependências da pasta externa lib
}*/
/* Configuração para gerar as lib compactadas no .jar do projeto;
jar {
    duplicatesStrategy = 'exclude'
    manifest {
        attributes "Main-Class": "br.com.studproject.gestorcontab.StartJavaFX"
    }
    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
*/
jar {
    duplicatesStrategy = 'exclude'
    manifest {
        attributes "Main-Class": "br.com.studproject.gestorcontab.StartJavaFX"
    }
    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'BOOT-INF/lib/**'
    from 'lib'
}
bootJar {
    archiveFileName = 'my-application.jar'  // Nome do arquivo JAR gerado

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/libs/lib"
}

task copyJre(type: Copy) {
    from 'C:/Java/jdk-11'  // Substitua pelo caminho correto do JRE
    into "$buildDir/libs/jre"
}

jar.dependsOn(copyLibs, copyJre)
/*
jar {
    duplicatesStrategy = 'exclude'
    manifest {
        attributes 'Main-Class': 'br.com.studproject.gestorcontab.StartJavaFX'
    }

    from sourceSets.main.output

    // Incluir outras pastas dentro de BOOT-INF, se necessário
    from 'BOOT-INF/classes'
    from 'BOOT-INF/other-folder'

    from 'lib'  // Adicionar dependências da pasta externa lib
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/libs/lib"
}

task copyJre(type: Copy) {
    from 'C:/Java/jdk-11'  // Substitua pelo caminho correto do JRE
    into "$buildDir/libs/jre"
}


// Certifique-se de que a tarefa 'jar' dependa das tarefas 'copyLibs' e 'copyJre'
jar.dependsOn(copyLibs, copyJre)*/
